// The purpose of interfaces mainly is code reuse.
// Example for 2 structs englishBot and spanishBot, we will have a
// print bot which will do exactly the same thing

// Hence we can create an interface(called bot) which will have a common
// implementation of printBot

// A struct qualifies as an interface of type bot if it has a getGreeting method
// which returns a string
// type bot interface {
// 	getGreeting() string
// }

// we will create these 2 implementations of getGreeting for both types of bots, so
// that they qualify to be consider as a bot.

// now in printGreeting method, we will use the bot as a parameter type in order to
// achieve code reuse. Since both are of bot type we can call printGreeting for both.

// type bot interface {
// 	getGreeting(string, int) (string, error)
// }

// Concrete type: Types for which we can create a value
// map, struct, int, slice, bool, englishBot

// Interface type: Type of which we can't create a value

// Extra Interface Notes
// 1. Interfaces are not generic types ==> Other languages have generic types
// - Go famously doesn't.

// 2. Interfaces are implicit ==> We don't have to manually say that our custom type
// satisfies some interface.
// This is both a blessing and a curse. Blessing as we don't have to type the
// boiler plate like spanishBot implements bot.
// And a curse because we have to check if it's being implemented properly or not.
// Someone checking the code would have to figure out. Also we could run into
// errors at runtime while figuring out.

// 3. Interfaces are a contract to help us manage types.
// GARBAGE IN --> GARBAGE OUT
//  If our custom type's implementation of a function is broken, then interfaces won't
//  help us.

// 3. Interfaces are tough. Step #1 is understanding how to read them.
// Writing your own interfaces is tough and requires experience.