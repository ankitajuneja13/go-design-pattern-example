// Learn to properly use the documentation to figure out stuff
// https://golang.org/pkg/net/http/#Response

// Body io.ReadCloser
// This show that struct can also have interfaces as types
// This means that we can have any type that satisfies the io.ReadCloser interface.

// So we figure out that ReadCloser is also a type
// type ReadCloser interface {
// 	Reader
// 	Closer
// }
// This is not the normal interface syntax that we have seen
// Probably an interface could have multiple interfaces that must be satisfied
// So, ReadCloser interface must satisfy the requirements of both Reader & Closer.

// The concept of interfaces could be applied to print as well.
// With reader interface, the source of input could be [] of string / byte /
// float / int, etc.
// But we shouldn't have separate functions for these.

// Purpose of the reader interface
// We could require to read many different kinds of files like
// HTTP Request Body / Text File / HTML File / Image File / User entering text
// in command line.

// So we can have a common Reader interface for them. The condition is that
// it should return a byte slice as output.
// The read method is implemented such that it passes the byte slice as input
// params and that byte slice is modified. Along with that it returns the length
// of byte slice.

// Working with the read function
// We allocate a byte slice of arbitrarily large size
// We use this byte slice to pass it in the read function.
// We then typecast / convert it into the required type.

// The Writer Interface
// Do all this:
// bs := make([]byte, 99999)
// resp.Body.Read(bs)
// fmt.Println(string(bs))
// In one line
// Look for io.Copy in the documentation
// io.Copy(dst Writer, src Reader)
// io.Copy(os.Stdout, resp.Body)
// What does a Reader & Writer do?
// Reader: Source of data ---> []byte
// Writer: []byte ---> Source of data(Outgoing HTTP req,
// Text file on hard-drive, Image file on hard-drive, Terminal)

// The io.Copy function
// Lookup Writer interface in documentation.
// If you hover over os.Stdout, you will see that it has File type
// If you check the implementation of File, you can see that it
// implements the Write function, hence it implements the Writer
// interface.

// The implementation of io.Copy(Source code)
// If we hover to the Copy and lookup it's implementation, we can
// see that it also
// 1. Create a byte slice
// 2. Calls the read function on the reader(src.Read)
// 3. Calls the write function on the writer(dst.Write)